#!/usr/bin/env node
const commands = require('./commands');
const fs = require('fs');
const github = new require('github')({});

const log = (...messages) => messages.forEach(m => fs.appendFileSync('log', typeof m === 'string' ? m + '\n' : JSON.stringify(m) + '\n', 'utf-8'));

const yargs = require('yargs')
  .completion()
  .command('login', '', (yargs) => {
      yargs
      .command('user <username>', 'Login to your github account and retrieve an access token.', (yargs) => {
        yargs
        .usage('$0 user <username>')
        .positional('username', {
          type: 'string',
          describe: 'The username that you would like to use to log into github',
          conflicts: ['browser', 'token']
        })
      })
      .command('browser', 'Configure an access token for github.', (yargs) => {
        yargs
        .usage('$0 browser')
      })
      .command('token <token>', 'Configure an access token for github.', (yargs) => {
        yargs
        .usage('$0 token <token>')
        .positional('token', {
          type: 'string',
          describe: 'A token generated by github. \nDepending on the level of access, some features may not work correctly.',
          conflicts: ['browser', 'username']
        })
      })
    })
  .command(['find', 'search'], 'finds things like batman', (yargs) => {
      yargs
        // register completion handler
        // then remove the complete command <~ hack ¯\_(ツ)_/¯ ~>
        .completion('complete', function (a,b,c) {
          commands.find_autocomplete(...arguments);
        })
        .command('complete', false)

        .usage('$0 find <context> <repository>')
        .positional('context', {
          type: 'string'
        })
        .positional('repository', {
          type: 'string'
        })
        .option('repositorasdy', {
          type: 'string'
        })

        // TODO: Find out how yargs works out positional arguments and use to
        // create a smart autocomplete helper.

        log(yargs.getContext(), yargs.getUsageInstance(), yargs.getOptions());


    })
  .strict()
  .help()
  .argv;

switch(yargs._[0]) {
  case 'login':
    commands.login(yargs);
    break;
}